<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title x-text="currentBoardName ? `${currentBoardName} - ToCry` : 'ToCry'">ToCry</title>

  <!-- Pico.css for styling -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css" />

  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Chivo:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">

  <!-- Toast UI Editor for rich text editing -->
  <link rel="stylesheet" href="https://uicdn.toast.com/editor/latest/toastui-editor.min.css" />
  <script src="https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

  <!-- Highlight.js for code highlighting -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github.min.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>

  <!-- Generated TypeScript API Client (with adapter for compatibility) -->
  <!-- Load as regular script (uses dynamic imports internally) -->
  <script src="/api-client-adapter.js"></script>

  <!-- Explicit sequential loading: adapter -> store -> app -> Alpine -->
  <script>
    // Wait for ToCryApiClient, then load scripts in strict sequence
    function loadScriptSequence() {
      // Step 1: Wait for API client module to set window.ToCryApiClient
      function waitForApiClient() {
        if (window.ToCryApiClient) {
          console.log('‚úì API Client ready');
          loadStore();
        } else {
          setTimeout(waitForApiClient, 10);
        }
      }

      // Step 2: Load store.js
      function loadStore() {
        const storeScript = document.createElement('script');
        storeScript.src = '/store.js';
        storeScript.onload = () => {
          console.log('‚úì Store loaded');
          loadApp();
        };
        storeScript.onerror = () => console.error('‚úó Failed to load store.js');
        document.head.appendChild(storeScript);
      }

      // Step 3: Load app.js
      function loadApp() {
        const appScript = document.createElement('script');
        appScript.src = '/app.js';
        appScript.onload = () => {
          console.log('‚úì App loaded');
          loadAlpine();
        };
        appScript.onerror = () => console.error('‚úó Failed to load app.js');
        document.head.appendChild(appScript);
      }

      // Step 4: Load Alpine.js last
      function loadAlpine() {
        const alpineScript = document.createElement('script');
        alpineScript.src = 'https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js';
        alpineScript.defer = true;
        alpineScript.onload = () => {
          console.log('‚úì Alpine.js loaded and initialized');
        };
        alpineScript.onerror = () => console.error('‚úó Failed to load Alpine.js');
        document.head.appendChild(alpineScript);
      }

      // Start the sequence
      waitForApiClient();
    }

    // Start loading when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', loadScriptSequence);
    } else {
      loadScriptSequence();
    }
  </script>

  <link rel="stylesheet" href="/style.css" />
</head>
<body>
  <div x-data="toCryApp" x-init="init()">
    <!-- Header -->
    <header class="container-fluid">
      <nav>
        <ul>
          <li><strong style="font-size: 1.5rem;"><a href="https://tocry.ralsina.me" target="_blank" style="text-decoration: none; color: inherit;">ToCry</a></strong></li>
        </ul>
        <ul x-show="boards.length > 0 && !boardNotFound">
          <li>
            <input
            type="search"
            class="search-input"
            name="search"
            placeholder="Search notes... (use #tag for exact tag match)"
            x-model="searchQuery"
            @input="performSearch"
            x-ref="searchInput"
            aria-label="Search notes (press / to focus)"
          />
          </li>
          <li>
            <div class="theme-and-color-switcher" :class="{ 'is-open': showColorSelector }" @click.away="showColorSelector = false">
              <button @click="toggleTheme"
                      id="theme-switcher"
                      :aria-label="isDarkMode ? 'Switch to light theme' : 'Switch to dark theme'">
                <span x-text="isDarkMode ? '‚òÄÔ∏è' : 'üåô'"></span>
              </button>
              <div @click="showColorSelector = !showColorSelector"
                   id="current-color-swatch"
                   class="color-swatch"
                   :style="`background-color: ${currentColor}`"
                   :aria-label="'Select color scheme'"
                   :aria-expanded="showColorSelector">
              </div>
              <select x-model="currentColorScheme"
                      id="color-scheme-switcher"
                      @change="updateColorScheme(); showColorSelector = false"
                      aria-label="Color scheme">
                <option value="default">Default</option>
                <option value="amber">Amber</option>
                <option value="blue">Blue</option>
                <option value="cyan">Cyan</option>
                <option value="fuchsia">Fuchsia</option>
                <option value="grey">Grey</option>
                <option value="green">Green</option>
                <option value="indigo">Indigo</option>
                <option value="jade">Jade</option>
                <option value="lime">Lime</option>
                <option value="orange">Orange</option>
                <option value="pink">Pink</option>
                <option value="pumpkin">Pumpkin</option>
                <option value="purple">Purple</option>
                <option value="red">Red</option>
                <option value="sand">Sand</option>
                <option value="slate">Slate</option>
                <option value="violet">Violet</option>
                <option value="yellow">Yellow</option>
                <option value="zinc">Zinc</option>
              </select>
            </div>
          </li>
          <li x-show="boards.length > 0 && !boardNotFound">
            <select x-model="currentBoardName" @change="loadBoard($event.target.value)">
              <template x-for="board in boards" :key="board">
                <option :value="board" x-text="board"></option>
              </template>
            </select>
          </li>
          <li>
            <div style="position: relative;">
              <button @click="showBoardMenu = !showBoardMenu"
                      x-ref="hamburgerMenuButton"
                      :style="currentBoard && currentBoard.lanes && currentBoard.lanes.length === 0 ? 'animation: throb 2s ease-in-out infinite;' : ''"
                      outline
                      aria-label="Board menu"
                      title="Board operations">
                <svg viewBox="0 0 24 24" width="24" height="24" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round">
                  <line x1="3" y1="12" x2="21" y2="12"></line>
                  <line x1="3" y1="6" x2="21" y2="6"></line>
                  <line x1="3" y1="18" x2="21" y2="18"></line>
                </svg>
              </button>
              <!-- Board menu dropdown -->
              <div x-show="showBoardMenu"
                   x-cloak
                   x-transition:enter="transition ease-out duration-100"
                   x-transition:enter-start="opacity-0 scale-95"
                   x-transition:enter-end="opacity-100 scale-100"
                   x-transition:leave="transition ease-in duration-75"
                   x-transition:leave-start="opacity-100 scale-100"
                   x-transition:leave-end="opacity-0 scale-95"
                   @click.away="showBoardMenu = false"
                   style="position: absolute; top: 100%; right: 0; z-index: 1000; min-width: 200px; background: var(--pico-background-color); border: 1px solid var(--pico-muted-border-color); border-radius: var(--pico-border-radius); padding: 0.5rem; margin-top: 0.25rem; box-shadow: var(--pico-box-shadow);">
                <a href="#" @click.prevent="showNewBoardModal = true; showBoardMenu = false" style="display: block; padding: 0.5rem; text-decoration: none; color: inherit;">New Board</a>
                <a href="#" @click.prevent="handleRenameBoard(); showBoardMenu = false" style="display: block; padding: 0.5rem; text-decoration: none; color: inherit;">Rename Board</a>
                <a href="#" @click.prevent="handleShareBoard(); showBoardMenu = false" style="display: block; padding: 0.5rem; text-decoration: none; color: inherit;">Share Board</a>
                <hr style="margin: 0.5rem 0; border: none; border-top: 1px solid var(--pico-muted-border-color);">
                <!-- Public board controls -->
                <a href="#" @click.prevent="makeBoardPublic(); showBoardMenu = false" x-show="!currentBoard?.public" style="display: block; padding: 0.5rem; text-decoration: none; color: inherit;">üåê Make Board Public</a>
                <a href="#" @click.prevent="makeBoardPrivate(); showBoardMenu = false" x-show="currentBoard?.public" style="display: block; padding: 0.5rem; text-decoration: none; color: inherit;">üîí Make Board Private</a>
                <a href="#" @click.prevent="copyPublicLink(); showBoardMenu = false" x-show="currentBoard?.public" style="display: block; padding: 0.5rem; text-decoration: none; color: inherit;">üìã Copy Public Link</a>
                <hr x-show="currentBoard?.public" style="margin: 0.5rem 0; border: none; border-top: 1px solid var(--pico-muted-border-color);">
                <a href="#" @click.prevent="showAddLane = true; showBoardMenu = false" style="display: block; padding: 0.5rem; text-decoration: none; color: inherit;">New Lane</a>
                <hr style="margin: 0.5rem 0; border: none; border-top: 1px solid var(--pico-muted-border-color);">
                <a href="#" @click.prevent="handleDeleteBoard(); showBoardMenu = false" style="display: block; padding: 0.5rem; text-decoration: none; color: var(--pico-del-color);">Delete Board</a>
              </div>
            </div>
          </li>
          </ul>
      </nav>
    </header>

    <!-- Main Content -->
    <main class="container-fluid" style="display: flex; flex-direction: column; height: calc(100vh - 64px); overflow: hidden;">
      <!-- Loading State -->
      <div x-show="loading" x-cloak style="text-align: center; padding: 2rem;">
        <p>Loading board...</p>
      </div>

      <!-- Error State -->
      <div x-show="error && !boardNotFound" x-cloak style="text-align: center; padding: 2rem; color: var(--pico-del-color);">
        <p x-text="error"></p>
      </div>

      <!-- Board Content -->
      <div x-show="!loading && !error && currentBoard" class="board-container">
        <!-- Scroll buttons -->
        <button class="scroll-button scroll-left" @click="scrollBoard('left')" x-show="canScrollLeft" x-cloak>
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5">
            <polyline points="15 18 9 12 15 6"></polyline>
          </svg>
        </button>

        <!-- Kanban Board -->
        <div class="kanban-board" x-ref="kanbanBoard"
             x-show="currentBoard && currentBoard.lanes && currentBoard.lanes.length > 0">

          <!-- Visual Separator with Controls -->
          <div class="lane-separator"
               x-show="currentBoard && currentBoard.lanes && currentBoard.lanes.length > 1"
               :style="`left: ${getSeparatorPosition()}px;`"
               title="Shows which lanes are hidden - use arrows to show/hide lanes">
            <!-- Left button: show more lanes (decrease first_visible_lane) -->
            <button class="separator-control separator-control-left"
                    @click="decreaseFirstVisibleLane(); scrollBoard('left')"
                    :disabled="!canDecreaseFirstVisibleLane()"
                    title="Show more lanes to the left"
                    aria-label="Show more lanes">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="15 18 9 12 15 6"></polyline>
              </svg>
            </button>

            <div class="separator-line"></div>

            <!-- Right button: hide more lanes (increase first_visible_lane) -->
            <button class="separator-control separator-control-right"
                    @click="increaseFirstVisibleLane(); scrollBoard('right')"
                    :disabled="!canIncreaseFirstVisibleLane()"
                    title="Hide more lanes to the left"
                    aria-label="Hide more lanes">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="9 18 15 12 9 6"></polyline>
              </svg>
            </button>
          </div>

          <template x-for="(lane, index) in currentBoard?.lanes || []" :key="lane.name">
            <div class="lane"
                 :class="{ 'lane-hidden': isLaneHidden(index) }"
                 :data-lane-name="lane.name"
                 draggable="true"
                 x-transition:enter="transition ease-out duration-300"
                 x-transition:enter-start="opacity-0 transform translate-x-4"
                 x-transition:enter-end="opacity-100 transform translate-x-0"
                 x-transition:leave="transition ease-in duration-200"
                 x-transition:leave-start="opacity-100 transform translate-x-0"
                 x-transition:leave-end="opacity-0 transform -translate-x-4"
                 @dragstart="handleLaneDragStart($event, lane)"
                 @dragend="handleLaneDragEnd($event)"
                 @dragover="handleLaneDragOver($event)"
                 @drop="handleLaneDrop($event)">
              <div class="lane-header">
                <span x-show="editingLane !== lane.name"
                      x-text="lane.name"
                      @dblclick="startRenamingLane(lane.name)"></span>
                <input x-show="editingLane === lane.name"
                       x-model="editingLaneName"
                       @keyup.enter="confirmLaneRename()"
                       @keyup.escape="cancelLaneRename()"
                       @blur="confirmLaneRename()"
                       @click.stop
                       style="flex: 1; margin: 0; padding: 0.25rem; font-size: inherit; font-family: inherit;"
                       x-ref="laneRenameInput">
                <div style="display: flex; align-items: center; gap: 0.25rem;">
                  <span class="note-count" x-text="(lane.notes || []).filter(n => !n._hidden).length"></span>
                  <div class="lane-action-group">
                    <button @click="addNote(lane.name)"
                            title="Add note"
                            class="lane-action-btn"
                            :style="currentBoard && currentBoard.lanes && currentBoard.lanes.length > 0 && !currentBoard.lanes.some(l => l.notes && l.notes.length > 0) ? 'animation: throb 2s ease-in-out infinite;' : ''">
                      +
                    </button>
                    <button @click="deleteLane(lane.name)"
                            title="Delete lane"
                            class="lane-action-btn delete">
                      √ó
                    </button>
                  </div>
                </div>
              </div>
              <div class="lane-notes"
                   @dragover="handleDragOver($event, lane.name)"
                   @drop="handleDrop($event, lane.name)"
                   @paste="handlePaste($event, lane.name)">
                <!-- HTMX will load note cards here -->
                <template x-for="note in lane.notes || []" :key="note.sepiaId">
                  <div class="note-card"
                       :class="{ 'search-hidden': note._hidden }"
                       draggable="true"
                       :data-note-id="note.sepiaId"
                       :data-lane-name="lane.name"
                       @click="toggleNoteExpansion(note)"
                       @dragstart="handleDragStart($event, note, lane.name)"
                       @dragend="handleDragEnd($event)"
                       @dragover.prevent
                       @drop="handleNoteDrop($event, note, lane.name)"
                       x-transition:enter="transition ease-out duration-200"
                       x-transition:enter-start="opacity-0 transform scale-95"
                       x-transition:enter-end="opacity-100 transform scale-100"
                       x-transition:leave="transition ease-in duration-200"
                       x-transition:leave-start="opacity-100 transform scale-100"
                       x-transition:leave-end="opacity-0 transform scale-95">
                    <div class="note-card-header">
                      <div style="display: flex; justify-content: space-between; align-items: flex-start;">
                        <div style="flex: 1;">
                          <div class="note-title"
                               x-show="editingNoteTitle !== note.sepiaId"
                               x-text="note.title"
                               @dblclick="startEditingNoteTitle(note.sepiaId, lane.name, note.title)"
                               title="Double-click to edit"></div>
                          <input x-show="editingNoteTitle === note.sepiaId"
                                 x-model="editingNoteTitleText"
                                 @keyup.enter="confirmNoteTitleEdit()"
                                 @keyup.escape="cancelNoteTitleEdit()"
                                 @blur="confirmNoteTitleEdit()"
                                 @click.stop
                                 class="note-title-input"
                                 :x-ref="`noteTitleInput-${note.sepiaId}`"
                                 style="flex: 1; margin: 0; padding: 0; font-size: inherit; font-family: inherit; font-weight: 300; background: transparent; border: 1px solid var(--pico-primary); border-radius: 0.25rem; outline: none;">
                          </div>
                        <!-- Action buttons -->
                        <div class="note-header-actions">
                          <div class="note-action-group">
                            <!-- Share button (when private) -->
                            <button x-show="!note.public"
                                    @click.stop="updateNotePublic(note.sepiaId, true)"
                                    class="edit-note-btn"
                                    style="opacity: 1; transform: scale(1);"
                                    title="Make note public to share">
                              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="18" cy="5" r="3"></circle>
                                <circle cx="6" cy="12" r="3"></circle>
                                <circle cx="18" cy="19" r="3"></circle>
                                <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
                                <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
                              </svg>
                            </button>

                            <!-- Lock button (when public) -->
                            <button x-show="note.public"
                                    @click.stop="updateNotePublic(note.sepiaId, false)"
                                    class="edit-note-btn"
                                    style="opacity: 1; transform: scale(1);"
                                    title="Make note private">
                              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                                <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
                              </svg>
                            </button>

                            <!-- Link button (when public) -->
                            <button x-show="note.public"
                                    @click.stop="copyPermalink(note.sepiaId)"
                                    class="edit-note-btn"
                                    style="opacity: 1; transform: scale(1);"
                                    title="Copy public link">
                              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
                                <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
                              </svg>
                            </button>

                            <button @click.stop="editNoteById(note.sepiaId, lane.name)"
                                    class="edit-note-btn"
                                    style="opacity: 1; transform: scale(1);"
                                    title="Edit note">
                              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                              </svg>
                            </button>

                            <button class="expand-indicator" x-show="note.content" @click.stop="toggleNoteExpansion(note)">
                              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                   :style="`transition: transform 0.5s cubic-bezier(0.68, -0.55, 0.265, 1.55); transform: rotate(${note.expanded ? '180deg' : '0deg'})`">
                                <polyline points="6 9 12 15 18 9"></polyline>
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>

                      <!-- Tags always visible with inline editing - full width -->
                      <div class="note-tags"
                           x-show="note.tags && note.tags.length > 0 || editingNoteTags === note.sepiaId"
                           @dblclick="startEditingNoteTags(note.sepiaId, lane.name, note.tags || [])"
                           title="Double-click to edit tags"
                           style="min-height: 1.5rem; padding: 0.125rem; border-radius: 0.25rem; cursor: pointer; transition: background 0.2s ease;"
                           @mouseover="$el.style.background = 'rgba(var(--primary-rgb), 0.05)'"
                           @mouseout="$el.style.background = 'transparent'">

                        <!-- View mode: Display tags with remove buttons -->
                        <template x-for="tag in note.tags || []" :key="tag" x-show="editingNoteTags !== note.sepiaId">
                          <span class="note-tag"
                                style="position: relative; transition: all 0.2s ease;"
                                @mouseover="$el.style.background = 'rgba(var(--primary-rgb), 0.2)'"
                                @mouseout="$el.style.background = 'rgba(var(--primary-rgb), 0.1)'"
                                @click="searchByTag(tag)">
                            <span x-text="'#' + tag"></span>
                            <button @click.stop="removeQuickTag(note.sepiaId, lane.name, tag)"
                                    class="tag-remove-btn"
                                    title="Remove tag">√ó</button>
                          </span>
                        </template>

                        <!-- Add new tag button -->
                        <button x-show="editingNoteTags !== note.sepiaId && (note.tags || []).length < 5"
                                @click.stop="startEditingNoteTags(note.sepiaId, lane.name, note.tags || [])"
                                style="background: var(--pico-secondary-background); border: 1px dashed var(--pico-secondary-border-color); color: var(--pico-secondary); padding: 0.125rem 0.375rem; border-radius: var(--pico-border-radius); font-size: 0.75rem; margin-left: 0.25rem; cursor: pointer; transition: all 0.2s ease;"
                                @mouseover="$el.style.background = 'var(--pico-primary)'; $el.style.color = 'white'; $el.style.borderColor = 'var(--pico-primary)'"
                                @mouseout="$el.style.background = 'var(--pico-secondary-background)'; $el.style.color = 'var(--pico-secondary)'; $el.style.borderColor = 'var(--pico-secondary-border-color)'"
                                title="Add tag">+</button>

                        <!-- Edit mode: Input for editing tags -->
                        <div x-show="editingNoteTags === note.sepiaId"
                             style="display: flex; gap: 0.25rem; align-items: center;">
                          <input x-model="editingNoteTagsText"
                                 @keyup.enter="saveNoteTags()"
                                 @keyup.escape="cancelNoteTagsEdit()"
                                 @blur="saveNoteTags()"
                                 :x-ref="`noteTagsInput-${note.sepiaId}`"
                                 class="note-tags-input"
                                 placeholder="Enter tags (comma separated)..."
                                 style="flex: 1; font-size: 0.75rem; padding: 0.125rem 0.375rem; border: 1px solid var(--pico-primary); border-radius: var(--pico-border-radius); background: var(--pico-background-color); color: var(--pico-color); outline: none; min-width: 200px;">
                          <button @click="saveNoteTags()"
                                  style="background: var(--pico-primary); color: white; border: none; padding: 0.125rem 0.375rem; border-radius: var(--pico-border-radius); font-size: 0.75rem; cursor: pointer;"
                                  title="Save tags">‚úì</button>
                          <button @click="cancelNoteTagsEdit()"
                                  style="background: var(--pico-del-color); color: white; border: none; padding: 0.125rem 0.375rem; border-radius: var(--pico-border-radius); font-size: 0.75rem; cursor: pointer;"
                                  title="Cancel">√ó</button>
                        </div>
                      </div>

                      <div class="note-meta">
                        <span x-show="note.expanded && (note.start_date || note.end_date)"
                              class="note-dates"
                              x-text="`${note.start_date || ''} ${note.end_date ? ' - ' + note.end_date : ''}`"></span>
                        <!-- Attachment indicator (visible only when note is collapsed) -->
                        <span x-show="!note.expanded && note.attachments && note.attachments.length > 0"
                              style="display: inline-flex; align-items: center; gap: 0.25rem; margin-left: 0.5rem; font-size: 0.75rem; color: var(--pico-muted-color);">
                          <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path>
                          </svg>
                          <span x-text="note.attachments.length"></span>
                        </span>
                      </div>
                    </div>

                    <!-- Priority tab -->
                    <div x-show="note.priority"
                         :class="`priority-tab priority-${(note.priority || '').toLowerCase()}-tab`"
                         :title="`${(note.priority || '').charAt(0).toUpperCase() + (note.priority || '').slice(1)} Priority`">
                    </div>
                    <div class="note-content-wrapper">
                      <!-- View mode: Rendered markdown -->
                      <div class="note-content"
                           x-show="note.expanded && editingNoteContent !== note.sepiaId"
                           x-cloak
                           @click="startEditingNoteContent(note.sepiaId, lane.name, note.content)"
                           title="Click to edit content"
                           style="cursor: pointer; padding: 0.25rem; border-radius: 0.25rem; transition: background 0.2s ease;"
                           @mouseover="$el.style.background = 'rgba(var(--primary-rgb), 0.05)'"
                           @mouseout="$el.style.background = 'transparent'"
                           x-transition:enter="transition-all duration-500 cubic-bezier(0.68, -0.55, 0.265, 1.55)"
                           x-transition:enter-start="opacity-0 max-height-0 transform scale(95) -translate-y-2"
                           x-transition:enter-end="opacity-100 max-height-1000px transform scale(100) translate-y-0"
                           x-transition:leave="transition-all duration-400 cubic-bezier(0.68, -0.55, 0.265, 1.55)"
                           x-transition:leave-start="opacity-100 max-height-1000px transform scale(100) translate-y-0"
                           x-transition:leave-end="opacity-0 max-height-0 transform scale(95) -translate-y-2"
                           x-html="markdownToHtml(note.content)">
                      </div>

                      <!-- Edit mode: Textarea for content editing -->
                      <div class="note-content"
                           x-show="note.expanded && editingNoteContent === note.sepiaId"
                           x-cloak
                           x-transition:enter="transition-all duration-300 ease"
                           x-transition:enter-start="opacity-0 transform scale(95)"
                           x-transition:enter-end="opacity-100 transform scale(100)"
                           style="padding: 0;">
                        <textarea x-model="editingNoteContentText"
                                  @input="autoSaveNoteContent()"
                                  @keydown.enter.ctrl="saveNoteContent()"
                                  @keydown.esc="cancelNoteContentEdit()"
                                  @blur="saveNoteContent()"
                                  :x-ref="`noteContentInput-${note.sepiaId}`"
                                  class="note-content-input"
                                  placeholder="Enter note content (markdown supported)..."
                                  style="width: 100%; min-height: 100px; resize: vertical; font-family: inherit; font-size: 0.875rem; line-height: 1.5; border: 1px solid var(--pico-primary); border-radius: 0.25rem; padding: 0.5rem; background: var(--pico-background-color); color: var(--pico-color); outline: none; transition: border-color 0.2s ease;"
                                  @focus="$el.style.borderColor = 'var(--pico-primary-focus)'"
                                  @blur="$el.style.borderColor = 'var(--pico-primary)'"></textarea>
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 0.5rem; font-size: 0.75rem; color: var(--pico-muted-color);">
                          <span>Markdown supported ‚Ä¢ Ctrl+Enter to save ‚Ä¢ Esc to cancel</span>
                          <div style="display: flex; align-items: center; gap: 0.5rem;">
                            <span x-show="editingNoteContent && debouncedSaveNoteContent"
                                  style="display: flex; align-items: center; gap: 0.25rem;">
                              <span style="width: 8px; height: 8px; background: var(--pico-primary); border-radius: 50%; animation: pulse 1.5s ease-in-out infinite;"></span>
                              Auto-saving...
                            </span>
                            <span x-show="editingNoteContent && !debouncedSaveNoteContent">‚úì All changes saved</span>
                          </div>
                        </div>
                      </div>

                      <!-- Attachments section -->
                      <div x-show="note.expanded && note.attachments && note.attachments.length > 0"
                           x-cloak
                           x-transition:enter="transition-all duration-500 cubic-bezier(0.68, -0.55, 0.265, 1.55) delay-100"
                           x-transition:enter-start="opacity-0 max-height-0 transform scale(95)"
                           x-transition:enter-end="opacity-100 max-height-500px transform scale(100)"
                           x-transition:leave="transition-all duration-400 cubic-bezier(0.68, -0.55, 0.265, 1.55)"
                           style="margin-top: 1rem; padding-top: 1rem; border-top: 1px solid var(--pico-border-color);">
                        <p style="margin: 0 0 0.5rem 0; font-weight: 600; font-size: 0.875rem;">Attachments:</p>
                        <div style="display: flex; flex-direction: column; gap: 0.25rem;">
                          <template x-for="attachment in note.attachments" :key="attachment">
                            <div style="display: flex; align-items: center; justify-content: space-between; padding: 0.25rem 0; gap: 0.5rem;">
                              <a :href="`/attachments/${note.sepiaId}/${attachment}`"
                                 target="_blank"
                                 @click.stop
                                 style="display: flex; align-items: center; gap: 0.5rem; color: var(--pico-primary); text-decoration: none; font-size: 0.875rem; flex: 1; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" style="flex-shrink: 0;">
                                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                  <polyline points="7 10 12 15 17 10"></polyline>
                                  <line x1="12" y1="15" x2="12" y2="3"></line>
                                </svg>
                                <span x-text="getAttachmentFilename(attachment)" style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"></span>
                              </a>
                              <button @click="deleteAttachmentFromNote(note, attachment)"
                                      style="background: none; border: none; color: var(--pico-del-color); cursor: pointer; padding: 0.25rem; border-radius: var(--pico-border-radius); flex-shrink: 0;"
                                      title="Delete attachment">
                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                  <polyline points="3 6 5 6 21 6"></polyline>
                                  <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                </svg>
                              </button>
                            </div>
                          </template>
                        </div>
                      </div>
                    </div>
                  </div>
                </template>
              </div>
            </div>
          </template>
        </div>

        <!-- Right scroll button -->
        <button class="scroll-button scroll-right" @click="scrollBoard('right')" x-show="canScrollRight" x-cloak>
          <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5">
            <polyline points="9 18 15 12 9 6"></polyline>
          </svg>
        </button>
      </div>

      <!-- Empty Board - No Lanes -->
      <div x-show="!loading && !error && currentBoard && currentBoard.lanes && currentBoard.lanes.length === 0 && !loadingBoardFromUrl"
           style="text-align: center; padding: 3rem 2rem; max-width: 800px; margin: 0 auto;">
        <h2 style="font-size: 2rem; margin-bottom: 1rem; color: var(--pico-primary);">Create Your First Lanes</h2>
        <p style="font-size: 1.1rem; margin-bottom: 2rem; color: var(--pico-muted-color);">
          Lanes are columns where you organize your tasks. Choose a template below or create custom lanes using the menu.
        </p>

        <!-- Lane Templates -->
        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin-bottom: 2rem;">
          <!-- Simple Template -->
          <div @click="handleCreateLaneTemplate('simple')"
               style="background: var(--pico-background-color); border: 1px solid var(--pico-border-color); border-radius: var(--pico-border-radius); padding: 1.5rem; cursor: pointer; transition: all 0.2s ease;"
               @mouseover="$event.target.style.borderColor='var(--pico-primary)'"
               @mouseout="$event.target.style.borderColor='var(--pico-border-color)'">
            <h4 style="margin-bottom: 0.5rem; color: var(--pico-primary);">Simple</h4>
            <p style="font-size: 0.9rem; margin-bottom: 1rem; color: var(--pico-muted-color);">Basic workflow</p>
            <div style="font-size: 0.85rem; color: var(--pico-color); opacity: 0.8;">
              Todo ‚Üí In Progress ‚Üí Done
            </div>
          </div>

          <!-- Task Management Template -->
          <div @click="handleCreateLaneTemplate('taskmgmt')"
               style="background: var(--pico-background-color); border: 1px solid var(--pico-border-color); border-radius: var(--pico-border-radius); padding: 1.5rem; cursor: pointer; transition: all 0.2s ease;"
               @mouseover="$event.target.style.borderColor='var(--pico-primary)'"
               @mouseout="$event.target.style.borderColor='var(--pico-border-color)'">
            <h4 style="margin-bottom: 0.5rem; color: var(--pico-primary);">Task Management</h4>
            <p style="font-size: 0.9rem; margin-bottom: 1rem; color: var(--pico-muted-color);">Full project workflow</p>
            <div style="font-size: 0.85rem; color: var(--pico-color); opacity: 0.8;">
              Backlog ‚Üí To Do ‚Üí In Progress ‚Üí Review ‚Üí Done
            </div>
          </div>

          <!-- Time-based Template -->
          <div @click="handleCreateLaneTemplate('timebased')"
               style="background: var(--pico-background-color); border: 1px solid var(--pico-border-color); border-radius: var(--pico-border-radius); padding: 1.5rem; cursor: pointer; transition: all 0.2s ease;"
               @mouseover="$event.target.style.borderColor='var(--pico-primary)'"
               @mouseout="$event.target.style.borderColor='var(--pico-border-color)'">
            <h4 style="margin-bottom: 0.5rem; color: var(--pico-primary);">Time-based</h4>
            <p style="font-size: 0.9rem; margin-bottom: 1rem; color: var(--pico-muted-color);">Organize by time</p>
            <div style="font-size: 0.85rem; color: var(--pico-color); opacity: 0.8;">
              Today ‚Üí This Week ‚Üí Someday ‚Üí Done
            </div>
          </div>
        </div>

        <!-- Menu Guidance -->
        <div style="background: var(--pico-code-background-color); border-radius: var(--pico-border-radius); padding: 1.5rem;">
          <p style="margin: 0; text-align: center;">
            For custom lane names, use the menu button in the top right corner
          </p>
        </div>
      </div>

      <!-- Board Selection Screen -->
      <div x-show="!loading && !currentBoard && boards.length > 0 && !boardNotFound" style="text-align: center; padding: 4rem 2rem; max-width: 600px; margin: 0 auto; min-height: 100vh; box-sizing: border-box;">
        <h2 style="font-size: 2.5rem; margin-bottom: 1rem; color: var(--pico-primary);">Select a Board</h2>
        <p style="font-size: 1.25rem; margin-bottom: 2rem; color: var(--pico-muted-color);">Choose a board to start organizing your tasks</p>

        <div style="background: var(--pico-background-color); border: 1px solid var(--pico-border-color); border-radius: var(--pico-border-radius); padding: 2rem; margin-bottom: 2rem; max-height: 60vh; overflow-y: auto;">
          <h3 style="margin-bottom: 1.5rem; position: sticky; top: -2rem; background: var(--pico-background-color); padding: 2rem 2rem 0.5rem 2rem; margin: -2rem -2rem 1.5rem -2rem; z-index: 1; border-bottom: 1px solid var(--pico-border-color);">Your Boards</h3>
          <div style="display: grid; gap: 0.75rem; margin-bottom: 1.5rem;">
            <template x-for="board in boards" :key="board">
              <div @click="loadBoard(board)"
                   style="padding: 1rem 1.5rem; background: var(--pico-secondary-background); color: var(--pico-color); border: 1px solid var(--pico-border-color); border-radius: var(--pico-border-radius); cursor: pointer; text-align: left; font-size: 1rem; transition: all 0.2s ease; user-select: none;"
                   @mouseover="$event.target.style.background = 'var(--pico-secondary-hover)'"
                   @mouseout="$event.target.style.background = 'var(--pico-secondary-background)'">
                <div style="font-weight: 600; margin-bottom: 0.25rem;" x-text="board"></div>
                <div style="font-size: 0.875rem; opacity: 0.7;">Click to open board</div>
              </div>
            </template>
          </div>
          <button @click="handleNewBoard()"
                  style="padding: 0.75rem 1.5rem; background: var(--pico-primary); color: var(--pico-primary-inverse); border: none; border-radius: var(--pico-border-radius); cursor: pointer; position: sticky; bottom: 0; margin-top: 1rem;">
            Create New Board
          </button>
        </div>
      </div>

      <!-- Welcome Screen -->
      <div x-show="!loading && !loadingBoardFromUrl && !currentBoard && boards.length === 0 && !boardNotFound" style="text-align: center; padding: 4rem 2rem; max-width: 600px; margin: 0 auto;">
        <h2 style="font-size: 2.5rem; margin-bottom: 1rem; color: var(--pico-primary);">Welcome to ToCry</h2>
        <p style="font-size: 1.25rem; margin-bottom: 2rem; color: var(--pico-muted-color);">A simple Kanban-style task organizer</p>

        <div style="background: var(--pico-background-color); border: 1px solid var(--pico-border-color); border-radius: var(--pico-border-radius); padding: 2rem; margin-bottom: 2rem;">
          <h3 style="margin-bottom: 1rem;">Get Started</h3>
          <p style="margin-bottom: 1.5rem;">Create your first board to start organizing your tasks with drag-and-drop simplicity.</p>
          <button @click="handleNewBoard()"
                  style="font-size: 1.1rem; padding: 0.75rem 2rem; background: var(--pico-primary); color: var(--pico-primary-inverse); border: none; border-radius: var(--pico-border-radius); cursor: pointer;">
            Create Your First Board
          </button>
        </div>
      </div>

      <!-- Board Not Found Screen -->
      <div x-show="!loading && boardNotFound" style="text-align: center; padding: 4rem 2rem; max-width: 600px; margin: 0 auto;">
        <h2 style="font-size: 2.5rem; margin-bottom: 1rem; color: var(--pico-del-color);">Board Not Found</h2>
        <p style="font-size: 1.2rem; margin-bottom: 1rem; color: var(--pico-muted-color);">
          The board you're looking for doesn't exist or you don't have access to it.
        </p>
        <p style="font-size: 1rem; margin-bottom: 2rem; color: var(--pico-muted-color);">
          <strong x-text="error"></strong>
        </p>

        <div style="display: flex; gap: 1rem; justify-content: center; flex-wrap: wrap;">
          <button @click="window.location.href='/'"
                  style="padding: 0.75rem 2rem; background: var(--pico-primary); color: var(--pico-primary-inverse); border: none; border-radius: var(--pico-border-radius); cursor: pointer; font-size: 1rem;">
            Go to Home
          </button>
        </div>
      </div>
    </main>

    <!-- New Board Modal -->
    <div x-show="showNewBoardModal"
         x-cloak
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="modal-overlay"
         @click.self="showNewBoardModal = false"
         @keyup.escape.window="showNewBoardModal = false"
         x-init="$watch('showNewBoardModal', value => { if (value) $nextTick(() => $refs.newBoardInput.focus()) })">
      <div class="modal"
           @click.away="showNewBoardModal = false"
           x-transition:enter="transition ease-out duration-300"
           x-transition:enter-start="opacity-0 transform scale-90"
           x-transition:enter-end="opacity-100 transform scale-100"
           x-transition:leave="transition ease-in duration-200"
           x-transition:leave-start="opacity-100 transform scale-100"
           x-transition:leave-end="opacity-0 transform scale-90">
        <div class="modal-header">
          <h3>Create New Board</h3>
          <button @click="showNewBoardModal = false">&times;</button>
        </div>
        <div class="modal-body">
          <input type="text"
                 x-ref="newBoardInput"
                 x-model="newBoardName"
                 placeholder="Board name"
                 @keyup.enter="confirmNewBoard()">
        </div>
        <div class="modal-footer">
          <button @click="showNewBoardModal = false">Cancel</button>
          <button @click="confirmNewBoard()">Create Board</button>
        </div>
      </div>
    </div>

    <!-- Add Lane Modal -->
    <div x-show="showAddLane"
         x-cloak
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="modal-overlay"
         @click.self="showAddLane = false"
         @keyup.escape.window="showAddLane = false"
         x-init="$watch('showAddLane', value => { if (value) $nextTick(() => $refs.newLaneInput.focus()) })">
      <div class="modal"
           @click.away="showAddLane = false"
           x-transition:enter="transition ease-out duration-300"
           x-transition:enter-start="opacity-0 transform scale-90"
           x-transition:enter-end="opacity-100 transform scale-100"
           x-transition:leave="transition ease-in duration-200"
           x-transition:leave-start="opacity-100 transform scale-100"
           x-transition:leave-end="opacity-0 transform scale-90">
        <div class="modal-header">
          <h3>Add New Lane</h3>
          <button @click="showAddLane = false">&times;</button>
        </div>
        <div class="modal-body">
          <input type="text"
                 x-ref="newLaneInput"
                 x-model="newLaneName"
                 placeholder="Lane name"
                 @keyup.enter="confirmAddLane()">
        </div>
        <div class="modal-footer">
          <button @click="showAddLane = false">Cancel</button>
          <button @click="confirmAddLane()">Add Lane</button>
        </div>
      </div>
    </div>


    <!-- Edit Note Modal -->
    <div x-show="editingNote"
         x-cloak
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="modal-overlay"
         @click.self="cancelEditNote()">
      <div class="modal"
           @click.away="cancelEditNote()"
           style="max-width: 900px;"
           x-transition:enter="transition ease-out duration-300"
           x-transition:enter-start="opacity-0 transform scale-90"
           x-transition:enter-end="opacity-100 transform scale-100"
           x-transition:leave="transition ease-in duration-200"
           x-transition:leave-start="opacity-100 transform scale-100"
           x-transition:leave-end="opacity-0 transform scale-90">
        <div class="modal-header">
          <div style="display: flex; align-items: center; gap: 0.5rem; width: 100%;">
            <!-- Title input -->
            <input type="text" x-model="noteEdit.title" placeholder="Title" style="flex: 1; margin: 0;">

            <div style="display: flex; align-items: center; gap: 0.5rem;">
            <!-- Attachment button -->
            <button @click="showAttachmentModal = true; attachmentNote = {...noteEdit}"
                    class="edit-note-btn"
                    style="opacity: 1; transform: scale(1);"
                    title="Manage attachments">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21.44 11.05l-9.19 9.19a6 6 0 0 1-8.49-8.49l9.19-9.19a4 4 0 0 1 5.66 5.66l-9.2 9.19a2 2 0 0 1-2.83-2.83l8.49-8.48"></path>
              </svg>
            </button>

            <!-- Share button (when private) -->
            <button x-show="!noteEdit.public"
                    @click="updateNotePublic(noteEdit.sepiaId, true)"
                    class="edit-note-btn"
                    style="opacity: 1; transform: scale(1);"
                    title="Make note public to share">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <circle cx="18" cy="5" r="3"></circle>
                <circle cx="6" cy="12" r="3"></circle>
                <circle cx="18" cy="19" r="3"></circle>
                <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
                <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
              </svg>
            </button>

            <!-- Lock button (when public) -->
            <button x-show="noteEdit.public"
                    @click="updateNotePublic(noteEdit.sepiaId, false)"
                    class="edit-note-btn"
                    style="opacity: 1; transform: scale(1);"
                    title="Make note private">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
              </svg>
            </button>

            <!-- Link button (when public) -->
            <button x-show="noteEdit.public"
                    @click="copyPermalink(noteEdit.sepiaId)"
                    class="edit-note-btn"
                    style="opacity: 1; transform: scale(1);"
                    title="Copy public link">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
                <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
              </svg>
            </button>

            <button @click="cancelEditNote()" style="background: none; border: none; cursor: pointer; padding: 0.25rem; font-size: 1.5rem;">&times;</button>
            </div>
          </div>
        </div>
        <div class="modal-body">
          <div style="margin-bottom: 0.5rem;">
            <label>Tags (comma-separated)</label>
            <input type="text" x-model="noteEditTagsString" placeholder="tag1, tag2, tag3">
          </div>

          <div style="margin-bottom: 1rem; display: flex; gap: 1rem;">
            <div style="flex: 1;">
              <label>Priority</label>
              <select x-model="noteEdit.priority">
                <option value="">None</option>
                <option value="high">High</option>
                <option value="medium">Medium</option>
                <option value="low">Low</option>
              </select>
            </div>
            <div style="flex: 1;">
              <label>Start Date</label>
              <input type="date" x-model="noteEdit.start_date">
            </div>
            <div style="flex: 1;">
              <label>End Date</label>
              <input type="date" x-model="noteEdit.end_date">
            </div>
          </div>

          <!-- ToastUI Editor container -->
          <div id="editor"></div>

          </div>
        <div class="modal-footer">
          <button @click="cancelEditNote()">Cancel</button>
          <button @click="deleteNote()" x-show="noteEdit.sepiaId" class="contrast">Delete</button>
          <button @click="saveNote()">Save</button>
        </div>
      </div>
    </div>

    <!-- Generic Modal for Alerts and Prompts -->
    <div x-show="showModal"
         x-cloak
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="modal-overlay modal-overlay-top"
         @click.self="closeModal()"
         @keyup.escape.window="closeModal()">
      <div class="modal"
           @click.away="closeModal()"
           x-transition:enter="transition ease-out duration-300"
           x-transition:enter-start="opacity-0 transform scale-90"
           x-transition:enter-end="opacity-100 transform scale-100"
           x-transition:leave="transition ease-in duration-200"
           x-transition:leave-start="opacity-100 transform scale-100"
           x-transition:leave-end="opacity-0 transform scale-90"
           :class="{ 'public-warning-modal': modalType === 'public-warning' }">
        <div class="modal-header">
          <h3 x-text="modalTitle"></h3>
          <button @click="closeModal()">&times;</button>
        </div>
        <div class="modal-body">
          <div x-show="modalType === 'public-warning'" style="white-space: pre-line; font-family: monospace; background: var(--pico-code-background-color); padding: 1rem; border-radius: var(--pico-border-radius); margin: 1rem 0;">
            <span x-text="modalMessage"></span>
          </div>
          <p x-show="modalType !== 'public-warning'" x-text="modalMessage"></p>
          <div x-show="modalType === 'prompt'" style="margin-top: 1rem;">
            <input type="text" x-model="modalInput" x-ref="modalInputRef" @keyup.enter="confirmModal()">
          </div>
        </div>
        <div class="modal-footer">
          <button @click="closeModal()" x-text="modalCancelText" x-show="modalCancelText"></button>
          <button @click="confirmModal()" x-text="modalConfirmText" :class="modalType === 'public-warning' ? 'contrast' : 'primary'"></button>
        </div>
      </div>
    </div>

    <!-- Attachment Modal -->
    <div x-show="showAttachmentModal"
         x-cloak
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="modal-overlay"
         @click.self="showAttachmentModal = false">
      <div class="modal"
           @click.away="showAttachmentModal = false"
           x-transition:enter="transition ease-out duration-300"
           x-transition:enter-start="opacity-0 transform scale-90"
           x-transition:enter-end="opacity-100 transform scale-100"
           x-transition:leave="transition ease-in duration-200"
           x-transition:leave-start="opacity-100 transform scale-100"
           x-transition:leave-end="opacity-0 transform scale-90">
        <div class="modal-header">
          <h3>Attachments</h3>
          <button @click="showAttachmentModal = false">&times;</button>
        </div>
        <div class="modal-body">
          <div class="attachments-list" x-show="attachmentNote && attachmentNote.attachments && attachmentNote.attachments.length > 0">
            <template x-for="attachment in (attachmentNote?.attachments || [])" :key="attachment">
              <div class="attachment-item" style="display: flex; justify-content: space-between; align-items: center; padding: 0.5rem; border: 1px solid var(--pico-border-color); margin-bottom: 0.5rem; border-radius: 0.25rem; gap: 0.5rem;">
                <span x-text="attachment" style="flex: 1; min-width: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"></span>
                <button @click="deleteAttachment(attachment)"
                        style="background: var(--pico-del-color); color: white; border: none; padding: 0.25rem 0.5rem; border-radius: 0.25rem; cursor: pointer; flex-shrink: 0;">
                  Delete
                </button>
              </div>
            </template>
          </div>
          <p x-show="!attachmentNote || !attachmentNote.attachments || attachmentNote.attachments.length === 0" style="text-align: center; color: var(--pico-muted-color); margin: 2rem 0;">
            No attachments yet.
          </p>
          <div class="file-drop-zone"
               @click="$refs.fileInput.click()"
               @dragover.prevent
               @dragenter.prevent
               @drop.prevent="handleAttachmentFileDrop($event)"
               style="border: 2px dashed var(--pico-border-color); border-radius: 0.5rem; padding: 2rem; text-align: center; cursor: pointer; margin-top: 1rem; transition: all 0.2s ease;"
               @dragover="$el.style.borderColor = 'var(--pico-primary)'; $el.style.backgroundColor = 'var(--pico-primary-background)'"
               @dragleave="$el.style.borderColor = 'var(--pico-border-color)'; $el.style.backgroundColor = 'transparent'"
               @drop="$el.style.borderColor = 'var(--pico-border-color)'; $el.style.backgroundColor = 'transparent'">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5" style="margin: 0 auto; display: block;">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
              <polyline points="7,10 12,15 17,10"></polyline>
              <line x1="12" y1="15" x2="12" y2="3"></line>
            </svg>
            <p style="margin: 0.5rem 0 0.25rem 0;">Drop files here or click to browse</p>
            <p style="margin: 0; font-size: 0.875rem; color: var(--pico-muted-color);">Maximum file size: 10MB</p>
            <input type="file" x-ref="fileInput" @change="handleFileSelect($event)" multiple style="display: none;">
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Toast Container -->
  <div x-data="{
    toasts: [],
    init() {
      window.addEventListener('show-toast', (event) => {
        const { type, message } = event.detail
        const toastId = Date.now()
        this.toasts.push({ type, message, id: toastId })

        // Auto remove after 3 seconds
        setTimeout(() => {
          this.toasts = this.toasts.filter(t => t.id !== toastId)
        }, 3000)
      })
    }
  }" class="toast-container">
    <template x-for="toast in toasts" :key="toast.id">
      <div x-transition:enter="transition ease-out duration-300"
           x-transition:enter-start="opacity-0 transform translate-x-full scale-95"
           x-transition:enter-end="opacity-100 transform translate-x-0 scale-100"
           x-transition:leave="transition ease-in duration-200"
           x-transition:leave-start="opacity-100 transform translate-x-0 scale-100"
           x-transition:leave-end="opacity-0 transform translate-x-full scale-95"
           class="toast-notification"
           :class="`toast-${toast.type}`">
        <span x-text="toast.message" class="toast-message"></span>
      </div>
    </template>
  </div>

  <!-- Toast Styles -->
  <style>
    .toast-container {
      position: fixed !important;
      bottom: 2rem !important;
      left: 50% !important;
      transform: translateX(-50%) !important;
      z-index: 99999 !important;
      pointer-events: none !important;
      display: flex !important;
      flex-direction: column !important;
      align-items: center !important;
    }

    .toast-notification {
      padding: 0.875rem 1.25rem !important;
      border-radius: 0.375rem !important;
      color: #1f2937 !important;
      font-weight: 400 !important;
      font-size: 0.875rem !important;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
      display: flex !important;
      align-items: center !important;
      min-width: 250px !important;
      max-width: 400px !important;
      pointer-events: auto !important;
      cursor: pointer !important;
      border: 1px solid rgba(0, 0, 0, 0.08) !important;
      font-family: 'Chivo', sans-serif !important;
      line-height: 1.4 !important;
      margin: 0 0 0.75rem 0 !important;
      background: #f8fafc !important;
    }

    .toast-success {
      background: #f0fdf4 !important;
      border-color: rgba(134, 239, 172, 0.5) !important;
      color: #166534 !important;
    }

    .toast-error {
      background: #fef2f2 !important;
      border-color: rgba(252, 165, 165, 0.5) !important;
      color: #7f1d1d !important;
    }

    .toast-info {
      background: #eff6ff !important;
      border-color: rgba(147, 197, 253, 0.5) !important;
      color: #1e3a8a !important;
    }


    .toast-message {
      flex: 1 !important;
    }

    /* Override any Pico.css styles */
    .toast-notification * {
      all: unset !important;
      color: inherit !important;
      font-family: inherit !important;
    }

    .toast-success .toast-message {
      color: #166534 !important;
    }

    .toast-error .toast-message {
      color: #7f1d1d !important;
    }

    .toast-info .toast-message {
      color: #1e3a8a !important;
    }

    .toast-notification svg {
      display: block !important;
      width: 20px !important;
      height: 20px !important;
      stroke: white !important;
    }

    .toast-notification span {
      display: block !important;
      color: white !important;
      font-size: 0.875rem !important;
      font-weight: 500 !important;
    }

    /* Public Warning Modal Styles */
    .public-warning-modal {
      border: 2px solid var(--pico-del-color) !important;
      box-shadow: 0 0 20px rgba(220, 53, 69, 0.3) !important;
    }

    .public-warning-modal .modal-header {
      background: linear-gradient(135deg, #dc3545, #c82333) !important;
      color: white !important;
      margin: -1rem -1rem 1rem -1rem !important;
      padding: 1rem !important;
      border-radius: calc(var(--pico-border-radius) - 1px) calc(var(--pico-border-radius) - 1px) 0 0 !important;
    }

    .public-warning-modal .modal-header h3 {
      color: white !important;
      margin: 0 !important;
      font-weight: 700 !important;
    }

    .public-warning-modal .modal-header button {
      color: white !important;
      background: none !important;
      border: none !important;
      font-size: 1.5rem !important;
      opacity: 0.8 !important;
    }

    .public-warning-modal .modal-header button:hover {
      opacity: 1 !important;
    }

    .public-warning-modal .modal-body {
      color: var(--pico-del-color) !important;
      font-weight: 600 !important;
    }

    .public-warning-modal .modal-footer button.contrast {
      background: var(--pico-del-color) !important;
      border-color: var(--pico-del-color) !important;
      color: white !important;
      font-weight: 700 !important;
    }

    .public-warning-modal .modal-footer button.contrast:hover {
      background: #c82333 !important;
      border-color: #c82333 !important;
    }
  </style>
</body>
</html>
